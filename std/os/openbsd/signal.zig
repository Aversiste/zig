pub const SIGHUP = 1; // hangup
pub const SIGINT = 2; // interrupt
pub const SIGQUIT = 3; // quit
pub const SIGILL = 4; // illegal instruction (not reset when caught)
pub const SIGTRAP = 5; // trace trap (not reset when caught)
pub const SIGABRT = 6; // abort()
pub const SIGIOT = SIGABRT; // compatibility
pub const SIGEMT = 7; // EMT instruction
pub const SIGFPE = 8; // floating point exception
pub const SIGKILL = 9; // kill (cannot be caught or ignored)
pub const SIGBUS = 10; // bus error
pub const SIGSEGV = 11; // segmentation violation
pub const SIGSYS = 12; // bad argument to system call
pub const SIGPIPE = 13; // write on a pipe with no one to read it
pub const SIGALRM = 14; // alarm clock
pub const SIGTERM = 15; // software termination signal from kill
pub const SIGURG = 16; // urgent condition on IO channel
pub const SIGSTOP = 17; // sendable stop signal not from tty
pub const SIGTSTP = 18; // stop signal from tty
pub const SIGCONT = 19; // continue a stopped process
pub const SIGCHLD = 20; // to parent on child stop or exit
pub const SIGTTIN = 21; // to readers pgrp upon background tty read
pub const SIGTTOU = 22; // like TTIN for output if (tp->t_local&LTOSTOP)
pub const SIGIO = 23; // input/output possible signal
pub const SIGXCPU = 24; // exceeded CPU time limit
pub const SIGXFSZ = 25; // exceeded file size limit
pub const SIGVTALRM = 26; // virtual time alarm
pub const SIGPROF = 27; // profiling time alarm
pub const SIGWINCH = 28; // window size changes
pub const SIGINFO = 29; // information request
pub const SIGUSR1 = 30; // user defined signal 1
pub const SIGUSR2 = 31; // user defined signal 2
pub const SIGTHR  = 32; // thread library AST
pub const SIG_BLOCK = 1; // block specified signal set
pub const SIG_UNBLOCK = 2; // unblock specified signal set
pub const SIG_SETMASK = 3; // set specified signal set
